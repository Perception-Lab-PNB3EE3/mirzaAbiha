install.packages("rstatix")
library(rstatix)
anova_results <- anova_test(
data = df,
dv = Likertresponse,      # Dependent variable
wid = Participant,        # Participant ID (within-subjects factor)
between = background,     # Between-subjects factor
within = condition        # Within-subjects factor
)
anova_results <- anova_test(
data = df,
dv = Likertresponse,      # Dependent variable
wid = Participant,        # Participant ID (within-subjects factor)
between = background,     # Between-subjects factor
within = Condition        # Within-subjects factor
)
print(anova_results)
ggplot(df, aes(x = condition_num, y = Likertresponse, color = back_num, group = back_num)) +
geom_line(aes(group = back_num), position = position_dodge(0.1)) + # Line plot for interaction
geom_point(position = position_dodge(0.1)) +  # Points for each condition
labs(x = "Condition", y = "Likert Response", color = "Background") +
theme_minimal() +
theme(legend.position = "top") +
ggtitle("Interaction Plot of Condition and Background on Likert Response")
#load required packages
library(ggplot2)
ggplot(df, aes(x = condition_num, y = Likertresponse, color = back_num, group = back_num)) +
geom_line(aes(group = back_num), position = position_dodge(0.1)) + # Line plot for interaction
geom_point(position = position_dodge(0.1)) +  # Points for each condition
labs(x = "Condition", y = "Likert Response", color = "Background") +
theme_minimal() +
theme(legend.position = "top") +
ggtitle("Interaction Plot of Condition and Background on Likert Response")
ggplot(df, aes(x = interaction(condition_num, back_num), y = Likertresponse, fill = back_num)) +
geom_boxplot() +
labs(x = "Condition and Background", y = "Likert Response", fill = "Background") +
theme_minimal() +
ggtitle("Boxplot of Likert Responses by Condition and Background")
ggplot(df, aes(x = condition_num, y = Likertresponse, fill = back_num)) +
geom_boxplot() +
labs(x = "Condition", y = "Likert Response", fill = "Background") +
facet_wrap(~ back_num, scales = "free_x") +  # Facet by Background
theme_minimal() +
ggtitle("Boxplot of Likert Responses by Condition and Background")
ggplot(df, aes(x = condition_num, y = Likertresponse, fill = back_num)) +
geom_boxplot() +
labs(x = "Condition", y = "Likert Response", fill = "Background") +
facet_wrap(~ back_num) +  # Facet by Background (Multicultural vs. Homogeneous)
theme_minimal() +
ggtitle("Boxplot of Likert Responses by Condition and Background")
# Create the plot with facets
ggplot(df, aes(x = condition_num, y = Likertresponse, fill = back_num)) +
geom_boxplot() +
labs(x = "Condition", y = "Likert Response", fill = "Background") +
facet_wrap(~ back_num) +  # Facet by Background (Multicultural vs. Homogeneous)
theme_minimal() +
ggtitle("Boxplot of Likert Responses by Condition and Background")
#this is an interaction plot:
ggplot(df, aes(x = factor(condition_num), y = Likertresponse, color = factor(back_num), group = factor(back_num))) +
stat_summary(fun = mean, geom = "point", size = 3) +  # Mean points
stat_summary(fun = mean, geom = "line") +  # Line connecting means
labs(title = "Interaction Effect of Background and Condition on Likert Responses",
x = "Condition",
y = "Mean Likert Response",
color = "Background") +
theme_minimal()
ggplot(df, aes(x = interaction(condition_num, back_num), y = Likertresponse, fill = back_num)) +
geom_boxplot() +
labs(x = "Condition and Background", y = "Likert Response", fill = "Background") +
scale_x_discrete(labels = c("1.Multicultural Microinsult", "1.Multicultural Microinvalid", "1.Multicultural Normal",
"2.Homogeneous Microinsult", "2.Homogeneous Microinvalid", "2.Homogeneous Normal")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +  # Rotate x-axis labels
ggtitle("Boxplot of Likert Responses by Condition and Background")
ggplot(df, aes(x = interaction(condition_num, back_num), y = Likertresponse, fill = back_num)) +
geom_boxplot() +
labs(x = "Condition and Background", y = "Likert Response", fill = "Background") +
scale_x_discrete(labels = c("Microinsult", "Microinvalid", "Normal",
"Microinsult", "Microinvalid", "Normal")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +  # Rotate x-axis labels
ggtitle("Boxplot of Likert Responses by Condition and Background")
# Load required package
library(RColorBrewer)
# Set a colorblind-friendly color palette (e.g., "Set1" or "Paired")
cb_palette <- brewer.pal(8, "Set1")
# 1. Mean Likert Responses by Condition & Background
ggplot(df, aes(x = condition_means, y = Likertresponse, fill = back_num)) +
labs(title = "Mean Likert Responses by Condition & Background",
x = "Condition",
y = "Mean Likert Response",
fill = "Background") +
scale_fill_manual(values = cb_palette) +  # Use colorblind-friendly palette
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels
library(RColorBrewer)
cb_palette <- brewer.pal(8, "Set1")
ggplot(df, aes(x = condition_means, y = Likertresponse, fill = back_num)) +
labs(title = "Mean Likert Responses by Condition & Background",
x = "Condition",
y = "Mean Likert Response",
fill = "Background") +
scale_fill_manual(values = cb_palette) +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(df, aes(x = condition_means, y = Likertresponse, fill = back_num)) +
labs(title = "Mean Likert Responses by Condition & Background",
x = "Condition",
y = "Mean Likert Response",
fill = "Background") +
theme_minimal()
ggplot(df, aes(x = condition_means, y = Likertresponse, fill = back_num)) +
labs(title = "Mean Likert Responses by Condition & Background",
x = "Condition",
y = "Mean Likert Response",
fill = "Background") +
theme_minimal()
df_summary <- df %>%
group_by(condition_num, back_num) %>%
summarise(condition_means = mean(Likertresponse, na.rm = TRUE))  # Compute mean for each group
ggplot(df_summary, aes(x = interaction(condition_num, back_num), y = condition_means, fill = back_num)) +
geom_bar(stat = "identity") +
labs(title = "Mean Likert Responses by Condition & Background",
x = "Condition",
y = "Mean Likert Response",
fill = "Background") +
theme_minimal() +
scale_fill_brewer(palette = "Set1")  # Color palette for colorblind-friendly colors
#now we are going to create plots to look at the differences between background, the differences in the condition and the interaction effects between background and condition
ggplot(df, aes(x = condition_num, y = Likertresponse, fill = back_num)) +
labs(title = "Mean Likert Responses by Condition & Background",
x = "Condition",
y = "Mean Likert Response",
fill = "Background") +
theme_minimal()
background_means <- aggregate(Likertresponse ~ back_num, data =  df, FUN = mean) #this gives us the means of the likert responses for the two background conditions
condition_means <- aggregate(Likertresponse ~ condition_num, data = df, FUN = mean)#this gives the means of the likert responses for the three within-group conditions
ggplot(df, aes(x = condition_means, y = Likertresponse, fill = back_num)) +
labs(title = "Mean Likert Responses by Condition & Background",
x = "Condition",
y = "Mean Likert Response",
fill = "Background") +
theme_minimal()
ggplot(background_means, aes(x = back_num, y = Likertresponse, fill = back_num)) +
geom_bar(stat = "identity") +
labs(title = "Mean Likert Responses by Background",
x = "Background",
y = "Mean Likert Response") +
theme_minimal() +
scale_fill_brewer(palette = "Set1")  # Color palette for colorblind-friendly colors
ggplot(condition_means, aes(x = condition_num, y = Likertresponse, fill = condition_num)) +
geom_bar(stat = "identity") +
labs(title = "Mean Likert Responses by Condition",
x = "Condition",
y = "Mean Likert Response") +
theme_minimal() +
scale_fill_brewer(palette = "Set1")
df_means <- df %>%
group_by(condition_num, back_num) %>%
summarize(mean_Likert = mean(Likertresponse))
ggplot(combined_means, aes(x = interaction(condition_num, background), y = Likertresponse, fill = background)) +
geom_bar(stat = "identity", position = "dodge") +  # 'dodge' places bars side by side
labs(title = "Mean Likert Responses by Condition and Group",
x = "Condition",
y = "Mean Likert Response",
fill = "Group") +
scale_fill_manual(values = c("Multicultural" = "#56B4E9", "Homogeneous" = "#E69F00")) +  # Colorblind-friendly colors
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
combined_means <- merge(background_means, condition_means, by = "Likertresponse", suffixes = c("_background", "_condition"))
ggplot(combined_means, aes(x = interaction(condition_num, background), y = Likertresponse, fill = background)) +
geom_bar(stat = "identity", position = "dodge") +  # 'dodge' places bars side by side
labs(title = "Mean Likert Responses by Condition and Group",
x = "Condition",
y = "Mean Likert Response",
fill = "Group") +
scale_fill_manual(values = c("Multicultural" = "#56B4E9", "Homogeneous" = "#E69F00")) +  # Colorblind-friendly colors
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
combined_means <- expand.grid(background = c("Multicultural", "Homogeneous"),
condition_num = c("Microinsult", "Microinvalid", "Normal"))
# Add the corresponding means for each condition and background
combined_means$mean_Likert <- c(background_means$Likertresponse[1:3], condition_means$Likertresponse)
# View the combined data frame
print(combined_means)
ggplot(combined_means, aes(x = interaction(condition_num, background), y = Likertresponse, fill = background)) +
geom_bar(stat = "identity", position = "dodge") +  # 'dodge' places bars side by side
labs(title = "Mean Likert Responses by Condition and Group",
x = "Condition",
y = "Mean Likert Response",
fill = "Group") +
scale_fill_manual(values = c("Multicultural" = "#56B4E9", "Homogeneous" = "#E69F00")) +  # Colorblind-friendly colors
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(df, aes(condition_num, Likertresponse, fill = background)) +
geom_bar(stat="identity", position = "dodge") +
scale_fill_brewer("Set1")
ggplot(df, aes(condition_num, condition_means, fill = background)) +
geom_bar(stat="identity", position = "dodge") +
scale_fill_brewer("Set1")
library(tidyr)
condition_means_wide <- condition_means %>%
spread(key = condition_num, value = Likertresponse)
# Check the reshaped data
head(condition_means_wide)
View(df)
df <- df %>%
mutate(
mean_microinsult = ifelse(condition_num == "Microinsult", mean(Likertresponse[condition_num == "Microinsult"]), NA),
mean_microinvalid = ifelse(condition_num == "Microinvalid", mean(Likertresponse[condition_num == "Microinvalid"]), NA),
mean_normal = ifelse(condition_num == "Normal", mean(Likertresponse[condition_num == "Normal"]), NA)
)
# Check the resulting data frame
head(df)
#we can als
ggplot(df, condition_means, aes(condition_num, Likertresponse, fill = background)) +
geom_bar(stat="identity", position = "dodge") +
scale_fill_brewer("Set1")
ggplot(condition_means, aes(condition_num, Likertresponse, fill = background)) +
geom_bar(stat="identity", position = "dodge") +
scale_fill_brewer("Set1")
ggplot(condition_means, aes(condition_num, Likertresponse, fill = back_num)) +
geom_bar(stat="identity", position = "dodge") +
scale_fill_brewer("Set1")
condition_means <- aggregate(Likertresponse ~ condition_num + background, data = df, FUN = mean)
# Plot the bar chart with the background_num as the fill
ggplot(condition_means, aes(x = condition_num, y = Likertresponse, fill = background)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Mean Likert Response by Condition and Background",
x = "Condition",
y = "Mean Likert Response") +
scale_fill_brewer(palette = "Set1") +  # Color scheme
theme_minimal()
ggplot(df, aes(x = factor(condition), y = Likertresponse, fill = factor(background))) +
stat_summary(fun = mean, geom = "bar", position = "dodge") +
stat_summary(fun.data = mean_cl_boot, geom = "errorbar",
position = position_dodge(width = 0.9), width = 0.2) +
labs(title = "Interaction Effect of Background and Condition",
x = "Condition",
y = "Mean Likert Response",
fill = "Background") +
theme_minimal()
interaction.plot(df$Condition, df$Background, df$Severity,
col = c("blue", "red"), lty = 1, lwd = 2,
xlab = "Condition", ylab = "Severity",
main = "Interaction Effect: Background × Condition")
interaction.plot(df$Condition, df$Background, df$Likertresponse,
col = c("blue", "red"), lty = 1, lwd = 2,
xlab = "Condition", ylab = "Severity",
main = "Interaction Effect: Background × Condition")
ggplot(df, aes(x = Likertresponse)) +
geom_histogram(binwidth = 0.5, fill = "skyblue", color = "black") +
labs(title = "Distribution of Likert Responses", x = "Likert Response", y = "Count")
ggplot(df, aes(x = factor(back_num), y = Likertresponse, fill = factor(back_num))) +
geom_boxplot() +
labs(title = "Differences in Likert Responses by Background",
x = "Background",
y = "Likert Response") +
theme_minimal()
interaction.plot(x.factor = df$condition_num,
trace.factor = df$back_num,
response = df$Likertresponse,
fun = mean,
type = "b",
col = c("red", "blue"),
lty = 1,
pch = c(16, 17),
xlab = "Condition",
ylab = "Mean Likert Response",
trace.label = "Background")
ggplot(df, aes(x = factor(condition_num), y = Likertresponse, fill = factor(back_num))) +
stat_summary(fun = mean, geom = "bar", position = "dodge") +
stat_summary(fun.data = mean_cl_boot, geom = "errorbar",
position = position_dodge(width = 0.9), width = 0.2) +
labs(title = "Mean Likert Responses by Condition & Background",
x = "Condition",
y = "Mean Likert Response",
fill = "Background") +
theme_minimal()
ggplot(df, aes(x = factor(condition_num), y = Likertresponse, fill = factor(condition_num))) +
geom_boxplot() +
facet_wrap(~ back_num) +
labs(title = "Likert Response Distributions by Condition & Background",
x = "Condition",
y = "Likert Response") +
theme_minimal()
ggplot(df, aes(x = factor(condition_num), y = Likertresponse, color = factor(back_num))) +
geom_jitter(width = 0.2, alpha = 0.5) +  # Add some jitter to avoid overplotting
stat_summary(fun = mean, geom = "point", size = 3, shape = 17) +  # Show means
stat_smooth(method = "lm", aes(group = back_num), se = FALSE) +  # Linear trend lines
labs(title = "Scatter Plot of Likert Responses by Condition & Background",
x = "Condition",
y = "Likert Response",
color = "Background") +
theme_minimal()
ggplot(summary_df, aes(x = Condition, y = mean_Likert, fill = background)) +
geom_bar(stat = "identity", position = "dodge") +  # Bar plot for means
geom_errorbar(aes(ymin = mean_Likert - se_Likert, ymax = mean_Likert + se_Likert),
position = position_dodge(width = 0.9), width = 0.2) +  # Error bars
labs(title = "Mean Likert Responses by Condition & Background",
x = "Condition",
y = "Mean Likert Response",
fill = "Background") +
theme_minimal()
ggplot(df, aes(x = factor(back_num), y = Likertresponse, fill = factor(back_num))) +
geom_boxplot() +
labs(title = "Differences in Likert Responses by Background",
x = "Background",
y = "Likert Response") +
theme_minimal()
ggplot(df, aes(x = factor(condition_num), y = Likertresponse, color = factor(back_num), group = factor(back_num))) +
stat_summary(fun = mean, geom = "point", size = 3) +  # Mean points
stat_summary(fun = mean, geom = "line") +  # Line connecting means
labs(title = "Interaction Effect of Background and Condition on Likert Responses",
x = "Condition",
y = "Mean Likert Response",
color = "Background") +
theme_minimal()
ggplot(df, aes(x = interaction(condition_num, back_num), y = Likertresponse, fill = back_num)) +
geom_boxplot() +
labs(x = "Condition", y = "Likert Response", fill = "Background") +
scale_x_discrete(labels = c("Microinsult", "Microinvalid", "Normal",
"Microinsult", "Microinvalid", "Normal")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +  # Rotate x-axis labels
ggtitle("Boxplot of Likert Responses by Condition and Background")
ggplot(df, aes(x = Likertresponse)) +
geom_histogram(binwidth = 0.5, fill = "skyblue", color = "black") +
labs(title = "Distribution of Likert Responses", x = "Likert Response", y = "Count")
# Plot the bar chart with the background_num as the fill
ggplot(condition_means, aes(x = condition_num, y = Likertresponse, fill = background)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Mean Likert Response by Condition and Background",
x = "Condition",
y = "Mean Likert Response") +
scale_fill_brewer(palette = "Set1") +  # Color scheme
theme_minimal()
#this is a double bar graph showing the means for the conditions, separated by background
ggplot(df, aes(x = factor(condition_num), y = Likertresponse, fill = factor(back_num))) +
stat_summary(fun = mean, geom = "bar", position = "dodge") +
stat_summary(fun.data = mean_cl_boot, geom = "errorbar",
position = position_dodge(width = 0.9), width = 0.2) +
labs(title = "Mean Likert Responses by Condition & Background",
x = "Condition",
y = "Mean Likert Response",
fill = "Background") +
scale_fill_brewer(palette = "Set1") +  # Color scheme
theme_minimal()
ggplot(df, aes(x = factor(condition_num), y = Likertresponse, color = factor(back_num))) +
geom_jitter(width = 0.2, alpha = 0.5) +  # Add some jitter to avoid overplotting
stat_summary(fun = mean, geom = "point", size = 3, shape = 17) +  # Show means
stat_smooth(method = "lm", aes(group = back_num), se = FALSE) +  # Linear trend lines
labs(title = "Scatter Plot of Likert Responses by Condition & Background",
x = "Condition",
y = "Likert Response",
color = "Background") +
theme_minimal()
source("C:/Users/nmirz/Downloads/PNB 3EE3/mirzaAbiha/analysiscode.Rmd")
#load required packages
library(ggplot2)
library(readr)
#simulate the data
#first specify the sample sizes
ngroups = 2  #so i have two groups- multicultural vs. homogenous and then three within-participant conditions
nsubsGroup = 60 #so 60 participants per groups
sampleSizeRequired = 120 #a total of 120 participants needed
#Next define the labels for the background groups and the conditions
background = c("Multicultural", "Homogenous") #here we are specifying the labels for the background conditions
nConds = 3 #here i am specifying the number of conditions
condLabels = c("Microinsult", "Microinvalid", "Normal") #the labels for the conditions
#then we are going to create an empty data frame and specify the rows and the columns
df = data.frame(Participant=rep(0,sampleSizeRequired*nConds),
Condition=rep("NA", sampleSizeRequired, nConds), #this fills in the condition column with NA
background=rep("NA", sampleSizeRequired, nConds),#fills in the background column with NA
Likertresponse=rep(0, sampleSizeRequired, nConds), #fills in the likertresponse column with 0
stringAsFactors=TRUE
)
#here we are specifying the values we want for the participants, so 1-120 but repeat it for each of the three conditions so you     have three rows for participant 1, three for participant 2 etc.
df$Participant <- rep(1:sampleSizeRequired, each=nConds)
#here we are telling it to repeat the background characters - multicultural and homogenous for half of the 120 participants         becuase we want half of them to be multicultural and half homogenous. Then we want that to repeat again for each of the three       conditions. so that if a participant has 3 rows for each condition, each of those rows will say multicultural
df$background <- rep(rep(background, each=sampleSizeRequired/2), each=nConds)
#finally we need to fill in the condition column using the condition labels but we have to do it so that each participant gets one   #of the conditions so we use the time function
df$Condition <- rep(condLabels, times=sampleSizeRequired)
#outcome measures: likert responses. we have to specify what the possible values could be and then replace the 0s in the likert     response column randomly with this function
df$Likertresponse = sample(c(1,2,3,4,5), sampleSizeRequired, replace = TRUE)
#assume normality with the simulated data
#load required packages
library(ggplot2)
library(readr)
#simulate the data
#first specify the sample sizes
ngroups = 2  #so i have two groups- multicultural vs. homogenous and then three within-participant conditions
nsubsGroup = 60 #so 60 participants per groups
sampleSizeRequired = 120 #a total of 120 participants needed
#Next define the labels for the background groups and the conditions
background = c("Multicultural", "Homogenous") #here we are specifying the labels for the background conditions
nConds = 3 #here i am specifying the number of conditions
condLabels = c("Microinsult", "Microinvalid", "Normal") #the labels for the conditions
#then we are going to create an empty data frame and specify the rows and the columns
df = data.frame(Participant=rep(0,sampleSizeRequired*nConds),
Condition=rep("NA", sampleSizeRequired, nConds), #this fills in the condition column with NA
background=rep("NA", sampleSizeRequired, nConds),#fills in the background column with NA
Likertresponse=rep(0, sampleSizeRequired, nConds), #fills in the likertresponse column with 0
stringAsFactors=TRUE
)
#here we are specifying the values we want for the participants, so 1-120 but repeat it for each of the three conditions so you     have three rows for participant 1, three for participant 2 etc.
df$Participant <- rep(1:sampleSizeRequired, each=nConds)
#here we are telling it to repeat the background characters - multicultural and homogenous for half of the 120 participants         becuase we want half of them to be multicultural and half homogenous. Then we want that to repeat again for each of the three       conditions. so that if a participant has 3 rows for each condition, each of those rows will say multicultural
df$background <- rep(rep(background, each=sampleSizeRequired/2), each=nConds)
#finally we need to fill in the condition column using the condition labels but we have to do it so that each participant gets one   #of the conditions so we use the time function
df$Condition <- rep(condLabels, times=sampleSizeRequired)
#outcome measures: likert responses. we have to specify what the possible values could be and then replace the 0s in the likert     response column randomly with this function
df$Likertresponse = sample(c(1,2,3,4,5), sampleSizeRequired, replace = TRUE)
#assume normality with the simulated data
summary(df)
head(df)
#we can also look at the descriptive stats for the data, first lets find the mean:
background_means <- aggregate(Likertresponse ~ back_num, data =  df, FUN = mean) #this gives us the means of the likert responses for the two background conditions
summary(df)
head(df)
#make our data for background and conditions numeric
back_num <- factor(df$background)
condition_num <- factor(df$Condition)
#we can also look at the descriptive stats for the data, first lets find the mean:
background_means <- aggregate(Likertresponse ~ back_num, data =  df, FUN = mean) #this gives us the means of the likert responses for the two background conditions
condition_means <- aggregate(Likertresponse ~ condition_num, data = df, FUN = mean)#this gives the means of the likert responses for the three within-group conditions
#we can also find the sd:
background_sd <- aggregate(Likertresponse ~ back_num, data =  df, FUN = sd)
condition_sd <- aggregate(Likertresponse ~ condition_num, data = df, FUN = sd)
#check the number of participants in each group
table(df$Condition, df$background) #homogenous and multicultural groups have 60 participants each and then each condition has 60 data points because it is a within groups design. 120 participants in total
#we need to run a mixed 2*3 factorial ANOVA as there are both between subject factors and within
install.packages("rstatix")
library(rstatix)
anova_results <- anova_test(
data = df,
dv = Likertresponse,      # Dependent variable
wid = Participant,        # Participant ID
between = background,     # Between-subjects factor
within = Condition        # Within-subjects factor
)
print(anova_results)
#the sphericity results show that the p<.05 therefore we can reject the null hypothesis meaning that the within subject effect of conditions has equal variances
#the condition factor did show significant results. Meaning that participants show a perceived difference between the different conditions: microinsult, microinvalid, and normal interactions.
install.packages("rstatix")
#we need to run a mixed 2*3 factorial ANOVA as there are both between subject factors and within
install.packages("rstatix")
library(rstatix)
anova_results <- anova_test(
data = df,
dv = Likertresponse,      # Dependent variable
wid = Participant,        # Participant ID
between = background,     # Between-subjects factor
within = Condition        # Within-subjects factor
)
#we need to run a mixed 2*3 factorial ANOVA as there are both between subject factors and within
install.packages("rstatix")
library(rstatix)
anova_results <- anova_test(
data = df,
dv = Likertresponse,      # Dependent variable
wid = Participant,        # Participant ID
between = background,     # Between-subjects factor
within = Condition        # Within-subjects factor
)
print(anova_results)
#the sphericity results show that the p<.05 therefore we can reject the null hypothesis meaning that the within subject effect of conditions has equal variances
#the condition factor did show significant results. Meaning that participants show a perceived difference between the different conditions: microinsult, microinvalid, and normal interactions.
summary(df)
head(df)
#make our data for background and conditions numeric
back_num <- as.factor(df$background)
condition_num <- as.factor(df$Condition)
#we can also look at the descriptive stats for the data, first lets find the mean:
background_means <- aggregate(Likertresponse ~ back_num, data =  df, FUN = mean) #this gives us the means of the likert responses for the two background conditions
condition_means <- aggregate(Likertresponse ~ condition_num, data = df, FUN = mean)#this gives the means of the likert responses for the three within-group conditions
#we can also find the sd:
background_sd <- aggregate(Likertresponse ~ back_num, data =  df, FUN = sd)
condition_sd <- aggregate(Likertresponse ~ condition_num, data = df, FUN = sd)
#check the number of participants in each group
table(df$Condition, df$background) #homogenous and multicultural groups have 60 participants each and then each condition has 60 data points because it is a within groups design. 120 participants in total
?anova_
?df
#load required packages
library(ggplot2)
library(readr)
#simulate the data
#first specify the sample sizes
ngroups = 2  #so i have two groups- multicultural vs. homogenous and then three within-participant conditions
nsubsGroup = 60 #so 60 participants per groups
sampleSizeRequired = 120 #a total of 120 participants needed
#Next define the labels for the background groups and the conditions
background = c("Multicultural", "Homogenous") #here we are specifying the labels for the background conditions
nConds = 3 #here i am specifying the number of conditions
condLabels = c("Microinsult", "Microinvalid", "Normal") #the labels for the conditions
#then we are going to create an empty data frame and specify the rows and the columns
df = data.frame(Participant=rep(0,sampleSizeRequired*nConds),
Condition=rep("NA", sampleSizeRequired, nConds), #this fills in the condition column with NA
background=rep("NA", sampleSizeRequired, nConds),#fills in the background column with NA
Likertresponse=rep(0, sampleSizeRequired, nConds), #fills in the likertresponse column with 0
stringAsFactors=TRUE
)
#here we are specifying the values we want for the participants, so 1-120 but repeat it for each of the three conditions so you     have three rows for participant 1, three for participant 2 etc.
df$Participant <- rep(1:sampleSizeRequired, each=nConds)
#here we are telling it to repeat the background characters - multicultural and homogenous for half of the 120 participants         becuase we want half of them to be multicultural and half homogenous. Then we want that to repeat again for each of the three       conditions. so that if a participant has 3 rows for each condition, each of those rows will say multicultural
df$background <- rep(rep(background, each=sampleSizeRequired/2), each=nConds)
#finally we need to fill in the condition column using the condition labels but we have to do it so that each participant gets one   #of the conditions so we use the time function
df$Condition <- rep(condLabels, times=sampleSizeRequired)
#outcome measures: likert responses. we have to specify what the possible values could be and then replace the 0s in the likert     response column randomly with this function
df$Likertresponse = sample(c(1,2,3,4,5), sampleSizeRequired, replace = TRUE)
#assume normality with the simulated data
source("C:/Users/nmirz/Downloads/PNB 3EE3/mirzaAbiha/analysiscode.Rmd")
